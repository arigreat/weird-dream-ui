import {
  computed,
  createBaseVNode,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  normalizeClass,
  onMounted,
  openBlock,
  ref,
  renderSlot,
  unref
} from "./chunk-7Y2IV5AB.js";

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/button/src/type.mjs
var ButtonType = ["primary", "success", "info", "warning", "danger", "text"];
var ButtonSize = ["huge", "large", "medium", "small", "mini", "tiny"];
var buttonProps = {
  type: {
    type: String,
    validator(value) {
      return ButtonType.includes(value);
    },
    default: "primary"
  },
  size: {
    type: String,
    validator(value) {
      return ButtonSize.includes(value);
    },
    default: "medium"
  },
  round: {
    type: Boolean,
    default: false
  },
  circle: {
    type: Boolean,
    default: false
  },
  disabled: {
    type: Boolean,
    default: false
  }
};
var ButtonEmits = {
  click: (event) => event
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/button/src/button.vue.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/button.css";
var _sfc_main = defineComponent({
  __name: "button",
  props: buttonProps,
  emits: ButtonEmits,
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const buttonClass = computed(() => {
      return [
        "wd-button",
        `wd-button-${props.type}`,
        `wd-button-${props.size}`,
        props.round && "is-round",
        props.circle && "is-circle",
        props.disabled && "is-disabled"
      ];
    });
    function cik(event) {
      emits("click", event);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("button", {
        class: normalizeClass(buttonClass.value),
        onClick: cik
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/utils/vue/install.mjs
var withInstall = (main, extra) => {
  main.install = (app) => {
    for (const comp of [main, ...Object.values({})]) {
      app.component(comp.name, comp);
    }
  };
  return main;
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/button/index.mjs
var wdButton = withInstall(_sfc_main);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/button-group/src/button-group.vue2.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/button-group.css";
var _sfc_main2 = defineComponent({
  name: "wdButtonGroup"
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/_virtual/_plugin-vue_export-helper.mjs
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/button-group/src/button-group.vue.mjs
var _hoisted_1 = { class: "wd-button-group" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default")
  ]);
}
var buttonGroup = _export_sfc(_sfc_main2, [["render", _sfc_render]]);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/button-group/index.mjs
var wdButtonGroup = withInstall(buttonGroup);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/carousel/src/type.mjs
var carouselProps = {
  type: {
    type: String,
    validator(value) {
      return ["primary", "manual", "auto"].includes(value);
    },
    default: "primary"
  },
  width: {
    type: String,
    default: "500"
  },
  height: {
    type: String,
    default: "300"
  },
  round: {
    type: Boolean,
    default: false
  }
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/carousel/src/carousel.vue.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/carousel.css";
var _sfc_main3 = defineComponent({
  __name: "carousel",
  props: carouselProps,
  setup(__props) {
    const props = __props;
    const carouselClass = computed(() => {
      return [
        `wd-carousel-${props.type}`,
        props.round && "is-round"
      ];
    });
    const typeManual = props.type === "auto" ? false : true;
    const typeAuto = props.type === "manual" ? false : true;
    const carouselSelecter = ref(null);
    const carouselBg = ref(null);
    const carouselButtons = ref(null);
    onMounted(() => {
      var _a, _b, _c;
      if (carouselBg.value && carouselSelecter.value) {
        carouselBg.value.style.width = `${props.width}px`;
        carouselSelecter.value.style.width = `${props.width}px`;
        carouselBg.value.style.height = `${props.height}px`;
        carouselSelecter.value.style.height = `${props.height}px`;
        const imgSets = carouselSelecter.value.children;
        for (let i = 0; i < imgSets.length; i++) {
          const img = imgSets[i];
          img.style.width = `${props.width}px`;
          img.style.height = `${props.height}px`;
        }
      }
      let isCarousing = false;
      const carouselImg = ref(0);
      const carouselImgTotal = (_a = carouselSelecter.value) == null ? void 0 : _a.children.length;
      const firstImg = (_b = carouselSelecter.value) == null ? void 0 : _b.children[0].cloneNode(true);
      (_c = carouselSelecter.value) == null ? void 0 : _c.appendChild(firstImg);
      const carouselAnimationTime = 500;
      const carouselIntervalTime = 5e3;
      function carouselMovingAuto() {
        if (isCarousing) {
          return;
        }
        if (carouselSelecter.value) {
          isCarousing = true;
          carouselSelecter.value.style.setProperty("--transformNewX", `-${carouselImg.value * 100 + 100}%`);
          carouselSelecter.value.classList.add("is-moving");
          setTimeout(() => {
            var _a2, _b2, _c2, _d;
            if (carouselButtons.value) {
              carouselButtons.value.children[carouselImg.value].classList.remove("wd-carouselButtonCurrent");
            }
            (_a2 = carouselSelecter.value) == null ? void 0 : _a2.classList.remove("is-moving");
            carouselImg.value++;
            (_b2 = carouselSelecter.value) == null ? void 0 : _b2.style.setProperty("--transformOldX", `-${carouselImg.value * 100}%`);
            if (carouselButtons.value) {
              carouselButtons.value.children[carouselImg.value % carouselImgTotal].classList.add("wd-carouselButtonCurrent");
            }
            if (carouselImg.value == carouselImgTotal) {
              carouselImg.value = 0;
              (_c2 = carouselSelecter.value) == null ? void 0 : _c2.style.setProperty("--transformOldX", `-${carouselImg.value * 100}%`);
              (_d = carouselSelecter.value) == null ? void 0 : _d.classList.add("is-resetting");
              setTimeout(() => {
                var _a3;
                (_a3 = carouselSelecter.value) == null ? void 0 : _a3.classList.remove("is-resetting");
                isCarousing = false;
              }, 100);
            }
            isCarousing = false;
          }, carouselAnimationTime);
        }
      }
      typeAuto && setInterval(carouselMovingAuto, carouselIntervalTime);
      function carouselMovingManual(index2) {
        isCarousing = true;
        if (!carouselSelecter.value) {
          return;
        }
        carouselSelecter.value.style.setProperty("--transformNewX", `-${index2 * 100}%`);
        carouselSelecter.value.classList.add("is-moving");
        setTimeout(() => {
          if (carouselButtons.value) {
            carouselButtons.value.children[carouselImg.value].classList.remove("wd-carouselButtonCurrent");
          }
          if (!carouselSelecter.value) {
            return;
          }
          carouselSelecter.value.classList.remove("is-moving");
          carouselImg.value = index2;
          carouselSelecter.value.style.setProperty("--transformOldX", `-${carouselImg.value * 100}%`);
          if (carouselButtons.value) {
            carouselButtons.value.children[carouselImg.value % carouselImgTotal].classList.add("wd-carouselButtonCurrent");
          }
          isCarousing = false;
        }, carouselAnimationTime);
      }
      if (typeManual && carouselButtons.value) {
        for (let i = 0; i < carouselImgTotal; i++) {
          const button = document.createElement("div");
          button.classList.add("wd-carouselButton");
          button.addEventListener("click", (e) => {
            carouselMovingManual(i);
          });
          carouselButtons.value.appendChild(button);
        }
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["wd-carousel", carouselClass.value]),
        ref_key: "carouselBg",
        ref: carouselBg
      }, [
        createBaseVNode("div", {
          class: "wd-carouselImgbox",
          ref_key: "carouselSelecter",
          ref: carouselSelecter
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 512),
        unref(typeManual) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "wd-carouselButtonbox",
          ref_key: "carouselButtons",
          ref: carouselButtons
        }, null, 512)) : createCommentVNode("", true)
      ], 2);
    };
  }
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/carousel/index.mjs
var wdCarousel = withInstall(_sfc_main3);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/carousel-img/src/type.mjs
var carouselImgProps = {
  src: {
    type: String,
    default: ""
  },
  alt: {
    type: String,
    default: ""
  }
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/carousel-img/src/carousel-img.vue.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/carousel-img.css";
var _sfc_main4 = defineComponent({
  __name: "carousel-img",
  props: carouselImgProps,
  setup(__props) {
    const carouselImg = ref(null);
    const props = __props;
    function getImg() {
      if (carouselImg.value) {
        const src = `url(${props.src})`;
        carouselImg.value.style.setProperty("--imgSrc", src);
      }
    }
    onMounted(() => {
      getImg();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: "wd-carousel-img",
        ref_key: "carouselImg",
        ref: carouselImg
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 512);
    };
  }
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/carousel-img/index.mjs
var wdCarouselImg = withInstall(_sfc_main4);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/slidebar/src/type.mjs
var slidebarType = ["inner", "outer"];
var slidebarFill = ["full", "stripe", "default", "gradient"];
var slidebarColor = ["primary", "blue", "red", "grey", "yellow", "pink", "white", "black"];
var slidebarSize = ["huge", "large", "medium", "small", "mini"];
var slidebarProps = {
  type: {
    type: String,
    validator(value) {
      return slidebarType.includes(value);
    },
    default: "inner"
  },
  size: {
    type: String,
    validator(value) {
      return slidebarSize.includes(value);
    },
    default: "medium"
  },
  fill: {
    type: String,
    validator(value) {
      return slidebarFill.includes(value);
    },
    default: "default"
  },
  color: {
    type: String,
    validator(value) {
      return slidebarColor.includes(value);
    },
    default: "primary"
  },
  min: {
    type: String,
    default: "0"
  },
  max: {
    type: String,
    default: "100"
  },
  step: {
    type: String,
    default: "1"
  },
  value: {
    type: String,
    default: "0"
  }
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/slidebar/src/slidebar.vue.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/slidebar.css";
var _hoisted_12 = ["min", "max", "step", "value"];
var _sfc_main5 = defineComponent({
  __name: "slidebar",
  props: slidebarProps,
  emits: ["value"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slidebarClass = computed(() => {
      return [
        `wd-slidebar-${props.fill}`,
        `wd-slidebar-${props.color}-${props.fill}`,
        `wd-slidebar-${props.size}-${props.type}`
      ];
    });
    function getValue(e) {
      const element = e.target;
      const valuePersent = ((parseFloat(element.value) - parseFloat(props.min)) / (parseFloat(props.max) - parseFloat(props.min)) * 100).toFixed(2) + "%";
      element.style.setProperty("--currentValue", valuePersent);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("input", {
        class: normalizeClass(["wd-slidebar", slidebarClass.value]),
        onInput: _cache[0] || (_cache[0] = ($event) => getValue($event)),
        onChange: _cache[1] || (_cache[1] = ($event) => getValue($event)),
        type: "range",
        min: parseFloat(props.min),
        max: parseFloat(props.max),
        step: parseFloat(props.step),
        value: parseFloat(props.value)
      }, null, 42, _hoisted_12);
    };
  }
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/slidebar/index.mjs
var wdSlidebar = withInstall(_sfc_main5);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/utils/vue/element.mjs
function elementRealLeft(element) {
  let actualLeft = element.offsetLeft;
  let current = element.offsetParent;
  while (current !== null) {
    actualLeft += current.offsetLeft;
    current = current.offsetParent;
  }
  actualLeft -= window.scrollX;
  return actualLeft;
}
function elementRealTop(element) {
  let actualTop = element.offsetTop;
  let current = element.offsetParent;
  while (current !== null) {
    actualTop += current.offsetTop;
    current = current.offsetParent;
  }
  actualTop -= window.scrollY;
  return actualTop;
}

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/joystick/src/type.mjs
var JoystickColor = ["primary", "blue", "red", "grey", "yellow", "white", "black", "pink"];
var JoystickSize = ["large", "medium", "small"];
var joystickProps = {
  color: {
    type: String,
    validator(value) {
      return JoystickColor.includes(value);
    },
    default: "primary"
  },
  size: {
    type: String,
    validator(value) {
      return JoystickSize.includes(value);
    },
    default: "medium"
  }
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/joystick/src/joystick.vue.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/joystick.css";
var _sfc_main6 = defineComponent({
  __name: "joystick",
  props: joystickProps,
  emits: ["value"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const joystickSelector = ref(null);
    const joystickDiscClass = computed(() => {
      return [
        `wd-joystick-disc-${props.color}`,
        `wd-joystick-disc-${props.size}`
      ];
    });
    const joystickStickClass = computed(() => {
      return [
        `wd-joystick-stick-${props.color}`,
        `wd-joystick-stick-${props.size}`
      ];
    });
    onMounted(() => {
      if (!joystickSelector.value) {
        return;
      }
      const joystickDisc = joystickSelector.value;
      const joystickStick = joystickSelector.value.children[0];
      let joystickDiscLeft = elementRealLeft(joystickDisc);
      let joystickDiscTop = elementRealTop(joystickDisc);
      const joystickDiscDiameter = parseInt(getComputedStyle(joystickDisc).width);
      const joystickStickDiameter = parseInt(getComputedStyle(joystickStick).width);
      const joystickStickDefault = (joystickDiscDiameter - joystickStickDiameter) / 2;
      let ifJoystickMoused = false;
      function handleScrollNresize() {
        joystickDiscLeft = elementRealLeft(joystickDisc);
        joystickDiscTop = elementRealTop(joystickDisc);
      }
      document.addEventListener("scroll", handleScrollNresize);
      document.addEventListener("resize", handleScrollNresize);
      joystickStick.addEventListener("mousedown", (e) => {
        ifJoystickMoused = true;
      });
      document.addEventListener("mousemove", (e) => {
        if (!ifJoystickMoused) {
          return;
        }
        let projectedX = e.clientX - joystickDiscLeft - joystickStickDiameter / 2;
        let projectedY = e.clientY - joystickDiscTop - joystickStickDiameter / 2;
        const projectCircle = (joystickDiscDiameter / 2 - projectedY - joystickStickDiameter / 2) ** 2 + (joystickDiscDiameter / 2 - projectedX - joystickStickDiameter / 2) ** 2;
        const maxCircle = (joystickDiscDiameter / 2 - joystickStickDiameter / 2) ** 2;
        if (projectCircle > maxCircle) {
          const scale = Math.sqrt(maxCircle / projectCircle);
          projectedY = joystickDiscDiameter / 2 - (joystickDiscDiameter / 2 - projectedY - joystickStickDiameter / 2) * scale - joystickStickDiameter / 2;
          projectedX = joystickDiscDiameter / 2 - (joystickDiscDiameter / 2 - projectedX - joystickStickDiameter / 2) * scale - joystickStickDiameter / 2;
        }
        joystickStick.style.left = `${projectedX}px`;
        joystickStick.style.top = `${projectedY}px`;
        const stickX = (joystickDiscDiameter / 2 - projectedX - joystickStickDiameter / 2) / (joystickDiscDiameter / 2 - joystickStickDiameter / 2) * -1;
        const stickY = (joystickDiscDiameter / 2 - projectedY - joystickStickDiameter / 2) / (joystickDiscDiameter / 2 - joystickStickDiameter / 2);
        emits("value", stickX, stickY);
      });
      document.addEventListener("mouseup", () => {
        ifJoystickMoused = false;
        joystickStick.style.left = `${joystickStickDefault}px`;
        joystickStick.style.top = `${joystickStickDefault}px`;
      });
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["wd-joystick-disc", joystickDiscClass.value]),
        ref_key: "joystickSelector",
        ref: joystickSelector
      }, [
        createBaseVNode("div", {
          class: normalizeClass(["wd-joystick-stick", joystickStickClass.value])
        }, null, 2)
      ], 2);
    };
  }
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/joystick/index.mjs
var wdJoystick = withInstall(_sfc_main6);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/option/src/type.mjs
var OptionColor = ["primary", "blue", "red", "yellow", "black", "white", "pink"];
var OptionSize = ["huge", "large", "medium", "small", "mini", "tiny"];
var optionProps = {
  color: {
    type: String,
    validator(value) {
      return OptionColor.includes(value);
    },
    default: "primary"
  },
  size: {
    type: String,
    validator(value) {
      return OptionSize.includes(value);
    },
    default: "medium"
  },
  disabled: {
    type: Boolean,
    default: false
  }
};

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/option/src/option.vue.mjs
import "C:/Users/ariiii/Documents/program/study_project/FrontEnd/vue/vite_component/node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/theme-chalk/src/option.css";
var _sfc_main7 = defineComponent({
  __name: "option",
  props: optionProps,
  emits: ["value"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const optionClass = computed(() => {
      return [
        `wd-option-${props.color}`,
        `wd-option-${props.size}`
      ];
    });
    const optionValueClass = computed(() => {
      return value.value === null ? "" : value.value ? [`wd-option-${props.size}-on`, `wd-option-${props.color}-on`] : [`wd-option-${props.size}-off`, `wd-option-${props.color}-off`];
    });
    const value = ref(null);
    function optionChange() {
      if (value.value === null) {
        value.value = true;
      } else {
        value.value = !value.value;
      }
      emits("value", value.value);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["wd-option", [optionClass.value, optionValueClass.value]]),
        onClick: optionChange
      }, _cache[0] || (_cache[0] = [
        createBaseVNode("div", { class: "wd-option-stick" }, null, -1)
      ]), 2);
    };
  }
});

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/src/option/index.mjs
var wdOption = withInstall(_sfc_main7);

// ../node_modules/.pnpm/weird-dream-ui@0.1.2/node_modules/weird-dream-ui/es/index.mjs
var install = function(app) {
  app.component("wdButton", wdButton);
  app.component("wdButtonGroup", wdButtonGroup);
  app.component("wdCarousel", wdCarousel);
  app.component("wdCarouselImg", wdCarouselImg);
  app.component("wdJoystick", wdJoystick);
  app.component("wdOption", wdOption);
  app.component("wdSlidebar", wdSlidebar);
};
var index = {
  install
};
export {
  index as default,
  wdButton,
  wdButtonGroup,
  wdCarousel,
  wdCarouselImg,
  wdJoystick,
  wdOption,
  wdSlidebar
};
//# sourceMappingURL=weird-dream-ui.js.map
