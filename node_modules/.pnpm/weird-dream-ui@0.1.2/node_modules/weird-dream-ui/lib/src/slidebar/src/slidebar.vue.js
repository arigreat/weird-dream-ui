"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const vue = require("vue");
const type = require("./type.js");
require("../../../theme-chalk/src/slidebar.css");
const _hoisted_1 = ["min", "max", "step", "value"];
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  __name: "slidebar",
  props: type.slidebarProps,
  emits: ["value"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slidebarClass = vue.computed(() => {
      return [
        `wd-slidebar-${props.fill}`,
        `wd-slidebar-${props.color}-${props.fill}`,
        `wd-slidebar-${props.size}-${props.type}`
      ];
    });
    function getValue(e) {
      const element = e.target;
      const valuePersent = ((parseFloat(element.value) - parseFloat(props.min)) / (parseFloat(props.max) - parseFloat(props.min)) * 100).toFixed(2) + "%";
      element.style.setProperty("--currentValue", valuePersent);
    }
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("input", {
        class: vue.normalizeClass(["wd-slidebar", slidebarClass.value]),
        onInput: _cache[0] || (_cache[0] = ($event) => getValue($event)),
        onChange: _cache[1] || (_cache[1] = ($event) => getValue($event)),
        type: "range",
        min: parseFloat(props.min),
        max: parseFloat(props.max),
        step: parseFloat(props.step),
        value: parseFloat(props.value)
      }, null, 42, _hoisted_1);
    };
  }
});
exports.default = _sfc_main;
